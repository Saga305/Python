****************Python*******************

=> Definition:
	Python is high level, interpreted, interactive, object oriented programming language with automatic memory management and garbage collector.
	Python is dynamically typed and loosely coupled language.

=> Interpreter:
	The interpreter reads program line by line and execute it. Python interpreter is written in C language.
	Python source code runs directly from its source code.

=> Interactive:
	Python can communicate with another language as well as with a user.
		C++/C + Python = CPython or Cython
		Java + Python = Jython

=> Statically coupled language:
	A language in which you must have to specify the data type of variable for memory allocation is called Statically coupled Language.
	Python is dynamically coupled language.

=> Automatic memory management:
	If the values of python variables are same then it allocates a single memory block.

=> Garbage collector:
	It releases unused memory block. It is like a destructor for python.

=> Python data type / data structure:
	Python has two types of data types:
	1. Mutable
	2. Immutable

	=> Mutable data types:
		Mutable data types can change their values, but keep their ID (memory location).

	List of mutable data types:
	1. List
	2. Dictionary
	3. Sets

=> Immutable data types:
	An object with fixed value is called immutable data type.
	Such an object cannot be altered. A new object has to be created if a different value has to be stored.

	List of Immutable data Types:
	1. Number's
	2. String
	3. Tuple
	4. Frozen-sets

=> Sequence:
	Collection of data is called sequence.

=> Iterable Sequence:
	An object capable of returning all its member one at a time.

=> Hashable Sequence:
	We can able to access values of sequence from its index.

=> Numbers Data type:
	-> Immutable,unhashable.
	-> It contains int,float,double,complex etc.

=> Strings data type:
--------------------
	-> Immutable,Iterable,hashable.
	-> It contains a bunch of characters.

	syntex:
   	s = 'Python' or s = "Python"

=> String Indexing:
-------------------
	
	-------------------------------------------------------------------------
	|	forward(+ve)	|0	|1	|2	|3	|4	|5	|
	-------------------------------------------------------------------------
	|	String 		|P	|y	|t	|h	|o	|n	|
	-------------------------------------------------------------------------
	|	Backward(-Ve) 	|-6	|-5	|-4	|-3	|-2	|-1	|
	-------------------------------------------------------------------------

	Here in abvoe diagram Forward and backward indexing is shown for the string Python.

=> String Hashing:
------------------
	Syntex: variable_Name[index_Number]

	Example:
	-------
		>>> s='Python'
		>>> s[0]
		'P'
		>>> s[-6]
		'P'
		>>> s[1]
		'y'
		>>> s[-5]
		'y'
		>>> s[2]
		't'
		>>> s[-4]
		't'
		>>> s[0] == s[-6]
		True
		>>> s[1] == s[-5]
		True

=> String Slicing:
------------------
	Syntex:
	-------
		variable_Name[start_Index : End index]
			End Index values is considered as (length - 1)

	+Ve Indexing example:
	--------------------
		>>> s[0:5]
		'Pytho'
		>>> s[1:5]
		'ytho'
		>>> s[0:6]
		'Python'
		>>> s[0:]
		'Python'
		>>> s[:6]
		'Python'
		>>> s[:]
		'Python'

			
	-Ve Indexing example:
	--------------------

		>>> s[-6:]
		'Python'
		>>> s[:-1]
		'Pytho'
		>>> s[:-2]
		'Pyth'
		>>> s[-6:-2]
		'Pyth'
		>>> s[-3:-2]
		'h'
		>>> s[-3:-3]
		''
		>>> s[-3:-2]
		'h'

=> String Stepping:
------------------

	Syntex: Variable_Name[start_index:end_index:step]

	+Ve steppings example:
	---------------------
		>>> s[0:6:2]
		'Pto'
		>>> s[1:6:2]
		'yhn'
		>>> s[2:5:3]
		't'
		>>> s[0:5:4]
		'Po'
		>>> s[0:6:2]
		'Pto'
		>>> s[:6:2]
		'Pto'
		>>> s[::2]
		'Pto'
		>>> 

	-Ve Steppings:
	--------------
	1. varName[high:low:-step]
		[seq[high],seq[high-step],seq[high-step-step],seq[low+1]]

	2. varName[high::-step]
		[seq[high],seq[high-step],seq[high-step-step],seq[0]]

	3. varName[:low:-step]
		[seq[-1],seq[-1-step],seq[-1-step-step],seq[low+1]]

	4. varName[::-step]
		[seq[-1],seq[-1-step],seq[-1-step-step],seq[0]]

	Examples:
	---------

		>>> s[5:0:-1]
		'nohty'
		>>> s[5:0:-2]
		'nhy'
		>>> s[5:0:-3]
		'nt'
		>>> s[6:0:-1]
		'nohty'
		>>> s[:0:-1]
		'nohty'
		>>> s[::-1]
		'nohtyP'
		>>> 

